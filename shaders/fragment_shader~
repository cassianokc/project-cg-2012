/* fragment shader for per-fragment Phong shading */

varying vec3 normal;
varying vec4 position;

void main()
{
  vec3 normv = normalize(normal); //normal
  vec3 lightv = normalize(gl_LightSource[0].position.xyz - position.xyz); //luz
  vec3 viewv = normalize(-position.xyz); //direção de visão
  vec3 halfv = normalize(lightv + viewv); //vetor médio

  //calculando a componente ambiente
  vec4 ambient = gl_FrontMaterial.ambient * gl_LightSource[0].ambient;

  //calculando a componente difusa  
  float diff = max(0.0, dot(lightv, normv));
  vec4 diffuse = diff * gl_FrontMaterial.diffuse * gl_LightSource[0].diffuse;

  //calculando a componente especular
  float spec = max(0.0, pow(dot(halfv, normv), gl_FrontMaterial.shininess));
  vec4 specular = spec * gl_FrontMaterial.specular * gl_LightSource[0].specular;

  //calculando a cor final
  gl_FragColor = ambient + diffuse + specular;
}
